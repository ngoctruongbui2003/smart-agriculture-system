import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import * as nodemailer from 'nodemailer';
import { UsersService } from '../users/users.service';
import { MailerService } from '@nestjs-modules/mailer';
import { FieldService } from '../field/field.service';
import { SensorService } from '../sensor/sensor.service';
import { log } from 'node:console';

@Injectable()
export class MailService {
    private readonly logger = new Logger(MailService.name);

    constructor(
        private readonly mailerService: MailerService,
        private readonly userService: UsersService,
        private readonly fieldService: FieldService,
        private readonly sensorService: SensorService,
    ) {}

    async testMail(name: string) {
        await this.mailerService
        .sendMail({
            to: 'ngoctruongbuii2003@gmail.com', // list of receivers
            subject: 'TEST', // Subject line
            text: 'TEST', // plaintext body
            html: '<b>Hello {{name}}</b>', // HTML body content
            context: { name: name },
        })
        .then(() => {})
        .catch(() => {});
    }

    @Cron('30 21 * * *', { timeZone: 'Asia/Ho_Chi_Minh' }) 
    // @Cron('* * * * *') // Every minute
    async sendWeeklyReport() {
        this.logger.log('üîÑ B·∫Øt ƒë·∫ßu g·ª≠i email b√°o c√°o h√†ng tu·∫ßn...');
    
        // L·∫•y danh s√°ch user c√≥ b·∫≠t nh·∫≠n email
        const users = await this.userService.findUsersReceivingWeeklyEmail();
    
        if (users.length === 0) {
            this.logger.log('‚ö†Ô∏è Kh√¥ng c√≥ user n√†o b·∫≠t nh·∫≠n email.');
            return;
        }
    
        for (const user of users) {
            // üîç L·∫•y danh s√°ch field c·ªßa user
            const userFields = await this.fieldService.findByUserIdNoPagination(user._id.toString());
    
            if (userFields.length === 0) {
                this.logger.log(`‚ö†Ô∏è User ${user.email} kh√¥ng c√≥ field n√†o.`);
                continue;
            }
            this.logger.log(`üîç ƒê√£ t√¨m th·∫•y ${userFields.length} field c·ªßa user ${user.email}`);
    
            // üîÑ L·∫∑p qua t·ª´ng field ƒë·ªÉ l·∫•y d·ªØ li·ªáu th·ªëng k√™
            const reports: any[] = [];
    
            for (const field of userFields) {
                try {
                    const report = await this.sensorService.getWeeklyStatisticsByFieldId(field._id.toString());
                    reports.push({ fieldName: field.name, ...report });
                } catch (error) {
                    this.logger.error(`‚ùå L·ªói khi l·∫•y report cho field ${field.name}: ${error.message}`);
                }
            }
    
            if (reports.length === 0) {
                this.logger.log(`‚ö†Ô∏è Kh√¥ng c√≥ b√°o c√°o h·ª£p l·ªá ƒë·ªÉ g·ª≠i cho user ${user.email}.`);
                continue;
            }
    
            console.log(`üìä B√°o c√°o h√†ng tu·∫ßn cho ${user.email}:`, reports);
    
            for (const report of reports) {
                await this.sendEmail(
                    user.email,
                    'üìä B√°o c√°o tu·∫ßn t·ª´ GreenFairm',
                    'weekly-report',
                    report  // üëà G·ª≠i t·ª´ng b√°o c√°o ri√™ng l·∫ª
                );
            }
    
            this.logger.log(`‚úÖ ƒê√£ g·ª≠i b√°o c√°o cho user ${user.email}`);
        }
    }

    private async sendEmail(
        email: string,
        subject: string,
        template: string,
        data: any
    ) {
        try {
            console.log(`üì§ ƒêang g·ª≠i ${subject} t·ªõi email: ${email}`);
            console.log(`data:`, data);
            await this.mailerService.sendMail({
                to: email,
                subject: subject,
                template: template, // S·ª≠ d·ª•ng template
                context: { ...data }, // Truy·ªÅn d·ªØ li·ªáu v√†o template
            });

            this.logger.log(`üì© ƒê√£ g·ª≠i ${subject} t·ªõi email: ${email}`);
        } catch (error) {
            this.logger.error(`‚ùå L·ªói khi g·ª≠i ${subject} t·ªõi email ${email}:`, error);
        }
    }
}
